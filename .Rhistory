theme(axis.text.x = element_text(angle = 90, vjust = 0.5),
panel.grid.minor = element_blank(),
strip.placement = "outside",
panel.spacing.y = unit(0.5, "cm"), panel.spacing.x = unit(0.25,"cm"))
# outputs Figure 3a (CRPS_boxplot_years.pdf; main paper)
pdf(file = paste0(save.dir,"/","CRPS_boxplot_years.pdf"), width = 10, height = 3.5)
print(pp_boxplot)
dev.off()
save(collect_sub, file = "auxiliary/best_CRPS_years.rda")
pp_boxplot <- collect_sub %>%
ggplot() +
geom_point(aes(x = as.Date(vintage), y = value_raw, group = vintage, size = weights),
shape = 1, alpha = 0.4) +
geom_hline(yintercept = c(0), linewidth = 0.3) +
facet_wrap(.~country, ncol = 7, scales = "free") +
xlab("") + ylab("CRPS (level)") +
scale_size_continuous(range = c(0.1, 3)) +
coord_cartesian(expand = TRUE, clip = "off") +
scale_x_date(breaks = "1 year", date_labels = "%Y") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5),
legend.position = "none",
panel.grid.minor = element_blank(),
strip.placement = "outside",
panel.spacing.y = unit(0.5, "cm"), panel.spacing.x = unit(0.25,"cm"))
# outputs Figure 3b (CRPSraw_boxplot_years.pdf; main paper)
pdf(file = paste0(save.dir,"/","CRPSraw_boxplot_years.pdf"), width = 10, height = 3.5)
print(pp_boxplot)
dev.off()
# --------------------------------------------------------------------------------------------------
# boxplots: across number of factors, averaged over the holdout
# --------------------------------------------------------------------------------------------------
collect_avg$uid2 <- paste0(collect_avg$country,"_h",collect_avg$horizon,"_",
collect_avg$model,"_",collect_avg$csr,"_",collect_avg$me)
collect_sub <- collect_avg %>%
subset(metric %in% "crps") %>%
subset(uid2 %in% subset2_regs)
bench_df <- collect_avg %>%
subset(model %in% "HM") %>%
rename("bench" = "value", "bench_raw" = "value_raw") %>% ungroup() %>%
select(c("horizon","country","nuts","vintage","metric","bench_raw","bench"))
collect_sub <- left_join(collect_sub, bench_df,
by = c("horizon","vintage","country","nuts","metric")) %>% ungroup() %>%
group_by(horizon,uid,uid2,country,nuts,model,states,qf,csr,me,metric) %>%
summarize(value = mean(value), bench = mean(bench),
value_raw = mean(value_raw), bench_raw = mean(bench_raw),
weights = mean(weights)) %>%
mutate(value_rel = value / bench, value_raw_rel = value_raw / bench_raw)
collect_sub$best <- 0
collect_sub$best[collect_sub$uid %in% subset_regs] <- 1
collect_sub$best <- factor(collect_sub$best)
collect_sub$qf <- factor(collect_sub$qf)
cn_num <- 5
sl_cn <- list("g1" = unique(collect_sub$country)[1:cn_num],
"g2" = unique(collect_sub$country)[(cn_num+1):length(unique(collect_sub$country))])
pp_box_ls <- list()
pp_raw_ls <- list()
collect_sub_avg <- collect_sub %>%
subset(best == 1)
save(collect_sub_avg, file = "auxiliary/best_CRPS_avg.rda")
for(i in 1:length(sl_cn)){
pp_box_ls[[i]] <- collect_sub %>%
subset(country %in% sl_cn[[i]]) %>%
ggplot() +
geom_boxplot(aes(x = qf, y = value_raw_rel, group = qf, fill = best),
outlier.size = 1, outlier.shape = 1, linewidth = 0.3) +
geom_hline(yintercept = c(1), linewidth = 0.75) +
geom_hline(yintercept = c(0), linewidth = 0.3) +
facet_grid(.~country, scales = "free", space = "free") +
scale_fill_manual(values = c("white","grey60")) +
xlab("Factors (Q)") + ylab("") +
coord_cartesian(expand = TRUE, clip = "off", ylim = c(0,1.2)) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5),
legend.position = "none",
panel.grid.minor = element_blank(),
strip.placement = "outside",
panel.spacing.y = unit(0.25, "cm"), panel.spacing.x = unit(0.5,"cm"))
pp_raw_ls[[i]] <- collect_sub %>%
subset(country %in% sl_cn[[i]]) %>%
ggplot() +
geom_point(aes(x = qf, y = value_raw, group = qf,
color = best, size = weights),
shape = 1, alpha = 0.4) +
facet_grid(.~country, scales = "free", space = "free") +
geom_hline(yintercept = c(0), linewidth = 0.3) +
scale_color_manual(values = c("grey60","black")) +
scale_size_continuous(range = c(0.1, 3)) +
xlab("Factors (Q)") + ylab("") +
coord_cartesian(expand = TRUE, clip = "off", ylim = c(0,0.065)) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5),
legend.position = "none",
panel.grid.minor = element_blank(),
strip.placement = "outside",
panel.spacing.y = unit(0.25, "cm"), panel.spacing.x = unit(0.5,"cm"))
}
pp_box <- plot_grid(plotlist = pp_box_ls,
ncol = 1,           # or ncol = 2 for horizontal
align = "v",
axis = "l")         # keep left axis line
pp_box <- ggdraw() +
draw_label("CRPS (ratio to benchmark)", x = 0.015, y = 0.5, angle = 90, vjust = 0.5, size = 11) +
draw_plot(pp_box, x = 0.01, y = 0, width = 0.98, height = 1)
# outputs Figure 1a (CRPS_boxplot_factors.pdf; main paper)
pdf(file = paste0(save.dir,"/","CRPS_boxplot_factors.pdf"), width = 10, height = 3.5)
print(pp_box)
dev.off()
pp_raw <- plot_grid(plotlist = pp_raw_ls,
ncol = 1,           # or ncol = 2 for horizontal
align = "v",
axis = "l")         # keep left axis line
pp_raw <- ggdraw() +
draw_label("CRPS (level)", x = 0.015, y = 0.5, angle = 90, vjust = 0.5, size = 11) +
draw_plot(pp_raw, x = 0.01, y = 0, width = 0.98, height = 1)
# outputs Figure 1b (CRPSraw_boxplot_factors.pdf; main paper)
pdf(file = paste0(save.dir,"/","CRPSraw_boxplot_factors.pdf"), width = 10, height = 3.5)
print(pp_raw)
dev.off()
# --------------------------------------------------------------------------------------------------
# plots of how data updates the latent states
# --------------------------------------------------------------------------------------------------
load("01_estimation/insample_df.rda")
# load("01_estimation/preds_df.rda")
# sl_subs <- unique(Zann_df$uid)
# sl_subs <- c(sl_subs[!grepl("Qf1_",sl_subs)],sl_subs[grepl("SK_",sl_subs)])
#
# tmp <- preds_df %>%
#   pivot_wider(names_from = moment, values_from = value) %>%
#   mutate(vintage = substr(vintage,1,4)) %>%
#   mutate(uid = paste0(country,"_",model,"-",states,"_Qf",qf,"_",csr,"_me",me)) %>%
#   subset(uid %in% sl_subs)
# tmp2 <- Zann_df %>%
#   select(date, nuts, uid, p16, p50, p84, value) %>%
#   rename("p16fs" = "p16", "p50fs" = "p50", "p84fs" = "p84", "true" = "value")
# preds_sub <- tmp %>% left_join(tmp2, by = c("date" = "date", "nuts" = "nuts", "uid" = "uid"))
# preds_sub$date <- as.character(as.Date(as.character(preds_sub$date)) %m+% months(2))
#
# sl_cn <- c("DE","IT","FR","ES")
# sl_nuts_big <- sl_nuts_median <- c()
# for(cc in sl_cn){
#   tmp <- collect_sub %>% subset(country %in% cc) %>% subset(best %in% 1)
#   sl_nuts_big <- c(sl_nuts_big, tmp$nuts[which(tmp$weights == max(tmp$weights))])
#   sl_nuts_median <- c(sl_nuts_median, tmp$nuts[which.min(abs(tmp$weights - median(tmp$weights)))])
# }
#
# sl_nuts <- c(sl_nuts_big, sl_nuts_median)
# sl_start <- c("2019-12-01")
#
# preds_final <- preds_sub %>% subset(vintage == "2023") %>%
#   subset(nuts %in% sl_nuts) %>%
#   subset(date %in% seq(as.Date(sl_start),as.Date("2023-12-01"),by = "month")) %>%
#   mutate(vintage = "Full sample") %>%
#   mutate("nuts_type" = ifelse(nuts %in% sl_nuts_big, "Largest", "Median"))
# preds_plot <- preds_sub %>%
#   subset(nuts %in% sl_nuts) %>%
#   subset(date %in% seq(as.Date(sl_start),as.Date("2023-12-01"),by = "month")) %>%
#   mutate(vintage_date = paste0(vintage,"-12-01")) %>%
#   mutate(type = ifelse(vintage_date == date, "Nowcast",
#                        ifelse(as.character(as.Date(vintage_date) %m-% months(12)) == date, "Backcast", ""))) %>%
#   mutate("nuts_type" = ifelse(nuts %in% sl_nuts_big, "Largest", "Median"))
#
# preds_plot$type <- factor(preds_plot$type, levels = c("Backcast","Nowcast",""))
# save(preds_plot, preds_final, file = "01_estimation/preds_sub.rda")
# load collected data files
load("01_estimation/preds_sub.rda")
vintage_cols <- c("#e7298a", "#33a02c","#1f78b4","#d95f02")
pp_vintage <- preds_plot %>%
subset(!(vintage %in% "2019")) %>%
ggplot(aes(x = as.Date(date), y = p50, color = vintage)) +
geom_ribbon(aes(ymin = p16fs, ymax = p84fs),
fill = "black", color = "black", alpha = 0, linewidth = 0.5, data = preds_final, linetype = "dotdash") +
geom_ribbon(aes(ymin = p16, ymax = p84, fill = vintage), alpha = 0.2, linewidth = NA) +
geom_text(aes(label = nuts), x = as.Date("2021-01-01"), y = 0.1, stat = "identity", color = "black", size = 4) +
geom_line() +
geom_point(aes(y = p50, color = vintage, shape = type), size = 1.5) +
geom_point(aes(y = true), color = "black", size = 2, shape = 4) +
ylab("GVA") + xlab("Date") +
scale_shape_manual(values = c(1,19,NA), name = "") +
scale_color_manual(values = vintage_cols, name = "Vintage") +
scale_fill_manual(values = vintage_cols, name = "Vintage") +
geom_hline(yintercept = 0) +
facet_wrap(nuts_type ~ country, switch = "y", ncol = 4) +
coord_cartesian(clip = "off", expand = FALSE) +
theme_minimal() +
theme(strip.placement = "outside",
legend.position = "bottom",
axis.text.x = element_text(angle = 0, vjust = 0),
panel.grid.minor = element_blank())
# outputs Figure 6 (nuts_realtime.pdf; main paper)
pdf(file = paste0(save.dir,"/nuts_realtime.pdf"), width = 8, height = 4.5)
print(pp_vintage)
dev.off()
# --------------------------------------------------------------------------------------------------
# plots VAR state equation diagnostics
# --------------------------------------------------------------------------------------------------
load("01_estimation/diag_df.rda")
sl_diag <- gsub("-SV","-hom",sl_best$uid)
diag_df <- diag_df %>%
mutate(model = gsub("-sv","-SV",gsub("mfreg","MF-DFM",model))) %>%
mutate(uid = paste0(country,"_h0_",model,"_",qf,"_CSR:",csr,"_ME:",me))
diag_logdet <- diag_df %>%
subset(type %in% c("logdetSig")) %>%
subset(uid %in% sl_diag) %>%
pivot_wider(names_from = moment, values_from = value)
pp_logdet <- diag_logdet %>%
ggplot(aes(x = as.Date(vintage))) +
geom_line(aes(y = p50)) +
xlab("") + ylab(expression(log(det(H)))) +
geom_ribbon(aes(ymin = p16, ymax = p84), alpha = 0.15) +
facet_wrap(~country, scales = "free", ncol = 7) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45))
# plot the eigenvalues
n_theta <- 400
circle <- data.frame(
x = cos(seq(0, 2*pi, length.out = n_theta)),
y = sin(seq(0, 2*pi, length.out = n_theta))
)
diag_eigen <- diag_df %>%
subset(type %in% c("maxeigReA","maxeigImA")) %>%
subset(uid %in% sl_diag) %>%
pivot_wider(names_from = type, values_from = value) %>%
select(country,vintage,moment,maxeigReA,maxeigImA) %>%
melt(id = c("country","moment","vintage")) %>%
pivot_wider(names_from = c(variable, moment), values_from = value)
disc_cols <- c("#4eb3d3","#2b8cbe","#0868ac","#084081","#fd8d3c","#e31a1c","#bd0026","#800026")
pp_eigen <- diag_eigen %>%
ggplot() +
geom_path(data = circle, aes(x, y), linewidth = .5) +
geom_hline(yintercept = 0, linetype = "dotted") + geom_vline(xintercept = 0, linetype = "dotted") +
geom_point(aes(x = maxeigReA_p50, y = maxeigImA_p50, color = vintage), size = 1.5, alpha = 0.5) +
scale_color_manual(values = disc_cols, name = "Max. eigenvalue\nVintage:") +
scale_x_continuous(breaks = c(-1,0,1)) + scale_y_continuous(breaks = c(-1,0,1)) +
facet_rep_wrap(~country, ncol = 7) + xlab("Real") + ylab("Imaginary") +
coord_fixed(xlim = c(-1.05, 1.05), ylim = c(-1.05, 1.05), expand = FALSE, clip = "off") +
theme_minimal() + theme(legend.position = "bottom")
# outputs Figure 7a (paras_eigen.pdf, main paper)
pdf(file = paste0(save.dir,"/paras_eigen.pdf"), width = 8, height = 4)
print(pp_eigen)
dev.off()
# outputs Figure 7b (paras_logdet.pdf, main paper)
pdf(file = paste0(save.dir,"/paras_logdet.pdf"), width = 8, height = 3)
print(pp_logdet)
dev.off()
# --------------------------------------------------------------------------------------------------
# plots unconditional variance of regions
# --------------------------------------------------------------------------------------------------
tmp <- diag_df %>%
subset(type %in% c("var")) %>%
subset(uid %in% sl_diag) %>%
pivot_wider(names_from = moment, values_from = value) %>%
mutate(vintage = substr(vintage, 1,4))
pp_ucv <- tmp %>%
subset(vintage %in% as.character(2019:2023)) %>%
ggplot() +
geom_boxplot(aes(x = log(p50), y = vintage), outliers = FALSE) +
facet_wrap(~country, scales = "free_x", ncol = 5) +
xlab("Log (unconditional variance)") + ylab("Vintage") +
coord_cartesian(expand = TRUE, clip = "off") +
scale_y_discrete(limits=rev) +
theme_minimal() +
theme(panel.spacing.x = unit(0.5, "cm"),
plot.margin = unit(c(0,0.5,0,0.1),"cm"))
# outputs Figure A.2 (paras_uncondvar.pdf; appendix)
pdf(file = paste0(save.dir,"/paras_uncondvar.pdf"), width = 9, height = 3.5)
print(pp_ucv)
dev.off()
rm(list = ls())
## SET WORKING DIRECTORY
wd <- dirname(rstudioapi::getSourceEditorContext()$path)
setwd(wd)
save.dir <- "outputs"
dir.create(save.dir, showWarnings = FALSE)
library(dplyr)
library(tidyr)
library(reshape2)
library(ggplot2)
library(cowplot)
library(ggh4x)
library(zoo)
library(lubridate)
load("01_estimation/mf_data_2025-05.rda") # original data
load("01_estimation/insample_df.rda") # nowcasted quarterly data
Zann_df$qf <- factor(Zann_df$qf, levels = c("single","multi"))
countries <- sort(unique(Zann_df$cn))
sl_dates <- as.character(seq(as.Date("2004-01-01"), as.Date("2100-12-01"), by = "month"))
# ----------------------------------------------------------------------------------------------
# annualized measures
# ----------------------------------------------------------------------------------------------
Zann_all <- list()
for(cc in 1:length(countries)){
Zann_all[[cc]] <- Zann_df %>%
subset(date %in% sl_dates) %>%
# subset(qf %in% "multi") %>%
subset(cn %in% countries[cc]) %>%
ggplot(aes(x = as.Date(date), group = nuts, y = p50)) +
geom_line(alpha = 0.35) +
geom_point(aes(y = value), size = 0.3, shape = 1) +
facet_nested(.~cn + qf) +
ylab("") + xlab("") +
coord_cartesian(expand = FALSE, clip = "off") +
theme_minimal() +
theme(panel.grid.minor = element_blank(), panel.spacing.x = unit(0.2, "cm"),
plot.margin = margin(0, 0, -0.25, 0, "cm"),
strip.background = element_rect(fill = "grey95", linewidth = 0, color = "grey95"),
axis.text.x = element_text(angle = 0))
}
# outputs Figure 4 (insample_all.pdf; main paper)
pdf(file = paste0(save.dir,"/insample_all.pdf"), width = 10, height = 8.5)
print(plot_grid(plotlist = Zann_all, ncol = 3))
dev.off()
tmp_all <- Zann_df %>% subset(!(cn %in% "SK")) %>% subset(qf %in% "multi") %>% select(!qf)
tmp_SK <- Zann_df %>% subset(cn %in% "SK") %>% select(!qf)
Zann_sub <- bind_rows(tmp_all,tmp_SK)
save(Zann_sub, file = "auxiliary/best_preds_fullsample.rda")
# ----------------------------------------------------------------------------------------------
# quarterly latent states
# ----------------------------------------------------------------------------------------------
Zlat_df$qf <- factor(Zlat_df$qf, levels = c("single","multi"))
Zlat_all <- list()
for(cc in 1:length(countries)){
Zlat_all[[cc]] <- Zlat_df %>%
subset(date %in% sl_dates) %>%
subset(cn %in% countries[cc]) %>%
ggplot(aes(x = as.Date(date), group = nuts, y = p50)) +
geom_line(alpha = 0.35) +
facet_nested(.~cn + qf) +
ylab("") + xlab("") +
coord_cartesian(expand = FALSE, clip = "off") +
theme_minimal() +
theme(panel.grid.minor = element_blank(), panel.spacing.x = unit(0.2, "cm"),
plot.margin = margin(0, 0, -0.25, 0, "cm"),
strip.background = element_rect(fill = "grey95", linewidth = 0, color = "grey95"),
axis.text.x = element_text(angle = 0))
}
pdf(file = paste0(save.dir,"/insample_all_lat.pdf"), width = 10, height = 8.5)
print(plot_grid(plotlist = Zlat_all, ncol = 3))
dev.off()
tmp_all <- Zlat_df %>% subset(!(cn %in% "SK")) %>% subset(qf %in% "multi") %>% select(!qf)
tmp_SK <- Zlat_df %>% subset(cn %in% "SK") %>% select(!qf)
Zlat_sub <- bind_rows(tmp_all,tmp_SK)
save(Zlat_sub, file = "auxiliary/best_preds_lat_fullsample.rda")
rm(list = ls())
## SET WORKING DIRECTORY
wd <- dirname(rstudioapi::getSourceEditorContext()$path)
setwd(wd)
save.dir <- "outputs"
dir.create(save.dir, showWarnings = FALSE)
library(dplyr)
library(tidyr)
library(readr)
library(ggplot2)
library(xtable)
library(colorspace)
library(eurostat)
library(sf)
library(tmap)
myggtheme <- theme(panel.grid.major.x = element_blank() ,
panel.grid.major.y = element_line( size=.01, color="lightgrey"),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = element_line(colour = "lightgrey"),
legend.position = "bottom")
geodata_NUTS2 <- get_eurostat_geospatial(nuts_level = 2, year = 2021, cache = TRUE, update_cache = TRUE)
# PRELIMINARY ACTIONS for MAPS
Sys.setenv("no_proxy"=".jrc.org,.jrc.cec.eu.int,.jrc.ec.europa.eu,.jrc.it,.jrc.es,localhost,127.0.0.1")
geodata_NUTS2 <- get_eurostat_geospatial(nuts_level = 2, year = 2021, cache = TRUE, update_cache = TRUE)
Sys.setenv("no_proxy"=".ec.europa.eu,.jrc.org,.jrc.cec.eu.int,.jrc.ec.europa.eu,.jrc.it,.jrc.es,localhost,127.0.0.1")
## 1. MAP PERFROMANCE ------------------------------------------------------------
load("auxiliary/best_CRPS_avg.rda")
collect_sub_avg$model %>% table
df_map <- collect_sub_avg %>%
filter(horizon == 0) %>%
ungroup() %>%
select(nuts, value_rel)
map_data <- left_join(geodata_NUTS2, #%>% mutate(geo = ifelse(substr(geo,1,2) %in% c("FR", "PL"), substr(geo,1,2), geo)),
df_map, by = c("geo"="nuts"))
ggplot(map_data) +
geom_sf(aes(fill=value_rel), color="grey", size=0.01) +
coord_sf(xlim=c(-11,30), ylim=c(35,67)) +
colorspace::scale_fill_continuous_diverging(palette="Blue-Red", mid=1, na.value = "white", name="") +
scale_colour_manual(values=NA) +
theme_void() +
guides(colour = "none") +
theme(legend.position = "bottom")
save.dir
ggplot(map_data) +
geom_sf(aes(fill=value_rel), color="grey", size=0.01) +
coord_sf(xlim=c(-11,30), ylim=c(35,67)) +
colorspace::scale_fill_continuous_diverging(palette="Blue-Red", mid=1, na.value = "white", name="") +
scale_colour_manual(values=NA) +
theme_void() +
guides(colour = "none") +
theme(legend.position = "bottom")
plot(1:10)
map_CRPS_MFREGvsHM.pdf
ggsave(paste0(save.dir, "/map_CRPS_MFREGvsHM.pdf"), height=8, width=10)
## 2. MAP COVID ----------------------------------------------------------------
## data
load("auxiliary/best_preds_lat_fullsample.rda")
Y <- Zlat_sub %>%
mutate(date = as.Date(as.character(date))) %>%
select(date, nuts, p50) %>%
filter(date %in% as.Date(c("2019-10-01", "2020-01-01", "2020-04-01", "2020-07-01"))) %>%
mutate(date = zoo::as.yearqtr(date))
eurMapDf2020 <- merge(geodata_NUTS2, unique(Y$date)) %>%
rename(date=y)
eurMapDataDf <- left_join(eurMapDf2020, Y, by = c("geo" = "nuts", "date"))
eurMapDataDf %>%
mutate(date = as.character(date)) %>%
ggplot()+
geom_sf(aes(fill=p50, colour="lightgrey"), size=0.01) +
facet_wrap(~date, ncol=4) +
coord_sf(xlim=c(-11,30), ylim=c(35,67)) +
colorspace::scale_fill_continuous_diverging(palette="Blue-Red 3", mid=0, na.value ="white", name="GVA growth\n", rev=T, p1=0.8, p2=0.8) +
scale_colour_manual(values=NA) +
theme_void() +
guides(colour = "none") +
theme(legend.position = "bottom", legend.title = element_blank())
eurMapDataDf <- left_join(eurMapDf2020, Y, by = c("geo" = "nuts", "date"))
eurMapDataDf %>%
mutate(date = as.character(date)) %>%
ggplot()+
geom_sf(aes(fill=p50, colour="lightgrey"), size=0.01) +
facet_wrap(~date, ncol=4) +
coord_sf(xlim=c(-11,30), ylim=c(35,67)) +
colorspace::scale_fill_continuous_diverging(palette="Blue-Red 3", mid=0, na.value ="white", name="GVA growth\n", rev=T, p1=0.8, p2=0.8) +
scale_colour_manual(values=NA) +
theme_void() +
guides(colour = "none") +
theme(legend.position = "bottom", legend.title = element_blank())
ggsave("outputs/map_GVA_20192020_wide.pdf", height=3, width=8)
Sys.setenv("no_proxy"=".jrc.org,.jrc.cec.eu.int,.jrc.ec.europa.eu,.jrc.it,.jrc.es,localhost,127.0.0.1")
# PRELIMINARY ACTIONS for MAPS
#Sys.setenv("no_proxy"=".jrc.org,.jrc.cec.eu.int,.jrc.ec.europa.eu,.jrc.it,.jrc.es,localhost,127.0.0.1")
if (file.exists("auxiliary/geodata_NUTS2.rda")){
load("auxiliary/geodata_NUTS2.rda")
} else {
geodata_NUTS2 <- get_eurostat_geospatial(nuts_level = 2, year = 2021, cache = TRUE, update_cache = TRUE)
save(geodata_NUTS2, file="auxiliary/geodata_NUTS2.rda")
}
Sys.setenv("no_proxy"=".ec.europa.eu,.jrc.org,.jrc.cec.eu.int,.jrc.ec.europa.eu,.jrc.it,.jrc.es,localhost,127.0.0.1")
rm(list = ls())
## SET WORKING DIRECTORY
wd <- dirname(rstudioapi::getSourceEditorContext()$path)
setwd(wd)
save.dir <- "outputs"
dir.create(save.dir, showWarnings = FALSE)
library(dplyr)
library(tidyr)
library(readr)
library(ggplot2)
library(xtable)
library(colorspace)
library(eurostat)
library(sf)
library(tmap)
myggtheme <- theme(panel.grid.major.x = element_blank() ,
panel.grid.major.y = element_line( size=.01, color="lightgrey"),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = element_line(colour = "lightgrey"),
legend.position = "bottom")
# PRELIMINARY ACTIONS for MAPS
if (file.exists("auxiliary/geodata_NUTS2.rda")){
load("auxiliary/geodata_NUTS2.rda")
} else {
geodata_NUTS2 <- get_eurostat_geospatial(nuts_level = 2, year = 2021, cache = TRUE, update_cache = TRUE)
save(geodata_NUTS2, file="auxiliary/geodata_NUTS2.rda")
}
## 1. MAP PERFROMANCE ------------------------------------------------------------
load("auxiliary/best_CRPS_avg.rda")
df_map <- collect_sub_avg %>%
filter(horizon == 0) %>%
ungroup() %>%
select(nuts, value_rel)
map_data <- left_join(geodata_NUTS2, df_map, by = c("geo"="nuts"))
ggplot(map_data) +
geom_sf(aes(fill=value_rel), color="grey", size=0.01) +
coord_sf(xlim=c(-11,30), ylim=c(35,67)) +
colorspace::scale_fill_continuous_diverging(palette="Blue-Red", mid=1, na.value = "white", name="") +
scale_colour_manual(values=NA) +
theme_void() +
guides(colour = "none") +
theme(legend.position = "bottom")
ggsave(paste0(save.dir, "/map_CRPS_MFREGvsHM.pdf"), height=8, width=10)
## 2. MAP COVID ----------------------------------------------------------------
## data
load("auxiliary/best_preds_lat_fullsample.rda")
Y <- Zlat_sub %>%
mutate(date = as.Date(as.character(date))) %>%
select(date, nuts, p50) %>%
filter(date %in% as.Date(c("2019-10-01", "2020-01-01", "2020-04-01", "2020-07-01"))) %>%
mutate(date = zoo::as.yearqtr(date))
eurMapDf2020 <- merge(geodata_NUTS2, unique(Y$date)) %>%
rename(date=y)
eurMapDataDf <- left_join(eurMapDf2020, Y, by = c("geo" = "nuts", "date"))
eurMapDataDf %>%
mutate(date = as.character(date)) %>%
ggplot()+
geom_sf(aes(fill=p50, colour="lightgrey"), size=0.01) +
facet_wrap(~date, ncol=4) +
coord_sf(xlim=c(-11,30), ylim=c(35,67)) +
colorspace::scale_fill_continuous_diverging(palette="Blue-Red 3", mid=0, na.value ="white", name="GVA growth\n", rev=T, p1=0.8, p2=0.8) +
scale_colour_manual(values=NA) +
theme_void() +
guides(colour = "none") +
theme(legend.position = "bottom", legend.title = element_blank())
ggsave(paste0(save.dir, "/map_GVA_20192020_wide.pdf"), height=3, width=8)
Sys.info
Sys.info()
